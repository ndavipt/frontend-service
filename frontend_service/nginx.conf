server {
  listen 80;
  
  # Handle root location
  location / {
    root /usr/share/nginx/html;
    index index.html index.htm;
    try_files $uri $uri/ /index.html;
  }
  
  # Proxy for the Logic Service
  location /scraper/ {
    # Redirect to Logic Service API with proper endpoints
    rewrite ^/scraper/profiles$ /api/v1/profiles permanent;
    rewrite ^/scraper/accounts$ /api/v1/accounts permanent;
    rewrite ^/scraper/(.*)$ /api/v1/$1 permanent;
    
    # Remove /scraper/ prefix before passing to backend
    rewrite ^/scraper/(.*)$ /api/v1/$1 break;
    proxy_pass https://logic-service.onrender.com/;
    proxy_set_header Host logic-service.onrender.com;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # SSL configuration
    proxy_ssl_verify off;  # Turn off SSL verification
    proxy_ssl_session_reuse on;
    proxy_ssl_protocols TLSv1.2 TLSv1.3;  # Specify SSL protocols
    proxy_ssl_ciphers HIGH:!aNULL:!MD5;   # Specify cipher suites
    
    # Increased timeouts
    proxy_connect_timeout 10s;
    proxy_read_timeout 30s;
    proxy_send_timeout 30s;
    
    # CORS headers
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
    
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      add_header 'Content-Length' 0;
      return 204;
    }
    
    # Handle Logic Service errors
    proxy_intercept_errors on;
    error_page 502 503 504 = @logic_fallback;
  }
  
  # Fallback for when Logic Service is unavailable
  location @logic_fallback {
    add_header Content-Type application/json;
    add_header Access-Control-Allow-Origin "*";
    
    # Return the fallback response immediately
    return 200 '{"status": "fallback", "message": "Using local fallback data due to Logic Service unavailability"}';
  }
  
  # Final fallback when all connection attempts fail
  location @logic_final_fallback {
    add_header Content-Type application/json;
    add_header Access-Control-Allow-Origin "*";
    return 200 '{"status": "fallback", "message": "Using local fallback data due to Logic Service unavailability"}';
  }
  
  # Proxy main API requests if a backend is available
  location /api/ {
    proxy_pass https://insta-leaderboard-api.onrender.com/api/;
    proxy_set_header Host insta-leaderboard-api.onrender.com;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # Handle API errors
    proxy_intercept_errors on;
    error_page 404 500 502 503 504 = @fallback_api;
  }
  
  # Fallback to Logic Service if main API is down
  location @fallback_api {
    # Set default status and content type
    add_header Content-Type application/json;
    
    # Use map to determine proxy destination based on URI
    # We can't use proxy_pass with variable inside named location
    # So instead we'll use internal redirects
    
    # For leaderboard endpoint
    if ($uri ~* "^/api/leaderboard") {
      return 302 /api/v1/profiles;
    }
    
    # For accounts endpoint
    if ($uri ~* "^/api/accounts") {
      return 302 /api/v1/accounts;
    }
    
    # For all other endpoints, return a status message
    return 503 '{"error": "API service unavailable", "message": "The main API is currently down. Try using the Logic Service directly."}';
  }
  
  # Proxy for the logic service
  location /logic/ {
    # Remove /logic/ prefix before passing to backend
    rewrite ^/logic/(.*)$ /$1 break;
    proxy_pass https://logic-service-2s7j.onrender.com/;
    proxy_set_header Host logic-service-2s7j.onrender.com;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # SSL configuration
    proxy_ssl_verify off;  # Turn off SSL verification
    proxy_ssl_session_reuse on;
    proxy_ssl_protocols TLSv1.2 TLSv1.3;  # Specify SSL protocols
    proxy_ssl_ciphers HIGH:!aNULL:!MD5;   # Specify cipher suites
    proxy_ssl_server_name on;  # Enable SNI support
    
    # Increased timeouts
    proxy_connect_timeout 10s;
    proxy_read_timeout 30s;
    proxy_send_timeout 30s;
    
    # CORS headers for logic service
    add_header 'Access-Control-Allow-Origin' '*' always;
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Origin,Accept' always;
    add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
    
    # Handle preflight requests
    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
      add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,Origin,Accept';
      add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain; charset=utf-8';
      add_header 'Content-Length' 0;
      return 204;
    }
    
    # Try to proxy to logic service directly first
    proxy_next_upstream error timeout http_502 http_503 http_504;
    
    # Handle logic service errors
    proxy_intercept_errors on;
    error_page 502 503 504 = @logic_fallback;
  }
  
  # Fallback for when logic service is unavailable
  location @logic_fallback {
    add_header Content-Type application/json;
    add_header Access-Control-Allow-Origin "*";
    
    # Return the fallback response immediately
    return 200 '{"status": "fallback", "message": "Using local fallback data due to service unavailability"}';
  }
  
  # Health check endpoint
  location /health {
    access_log off;
    add_header Content-Type text/plain;
    return 200 'OK';
  }
  
  # Error handling
  error_page 500 502 503 504 /50x.html;
  location = /50x.html {
    root /usr/share/nginx/html;
  }
}